install.packages("ggplot2")
install.packages("tidyr")
install.packages("dplyr")
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
?read.csv
read.csv(patch2csv, StringsAsFactors=FALSE)
read.csv(patch2csv, stringsAsFactors = FALSE)
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <-tbl_df(mydf)
rm("mydf")
cran
?select
cran %>% select(ip_id, package, country)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch:r_arch)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country=="IN", r_version <="3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500L, r_os =="linux-gnu")
filter(cran, size > 100500, r_os =="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, desc(country), decs(r_version), desc(ip_id))
arrange(cran2, desc(country), desc(r_version), desc(ip_id))
arrange(cran2, (country), desc(r_version), (ip_id))
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb =size_mb / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000 )
summarize(cran, avg_bytes =  mean(size))
library(swirl)
swirl()
library(swirl)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by(cran, package)
cran %>% group_by(package)
?group_by
cran %>% group_by(package)
by_package <- group_by(cran, package)
by_package
summarize(group_by, mean(size))
summarize(by_package, mean(size))
submit()
submit()
tbl
pack_sum
quantile(pack_sum$count, probs = 0.99)
pack_sum %>% filter(count>679)
filter(pack_sum, count>679)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, count)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique>465)
filter(pack_sum, unique > 465)
filter(pack_sum, unique > 465
)
filter(pack_sum, unique > 465)
top_unique <-filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unqiue))
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(swirl)
rm(list=ls())
swirl
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(student2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
seprate( data = res, col = sex_class, into = c("sex", "class", sep="-")
)
seprate( data = res, col = sex_class, into = c("sex", "class"), sep="-")
separate( data = res, col = sex_class, into = c("sex", "class"), sep="-")
separate( data = res, col = sex_class, into = c("sex", "class"))
submit()
submit()
stduents2
students
students3
students3 %>%
gather( test,class ,class1 :class5, na.rm = TRUE)
? spread
students3 %>%
gather( test,class ,class1 :class5, na.rm = TRUE) %>%
spread(test, class)
students3 %>%
gather( test,class ,class1 :class5, na.rm = TRUE) %>%
spread(test)
spread(students, test)
students3
spread(students, test)
students3 %>%
gather( test,class ,class1 :class5, na.rm = TRUE)
gather( class, scores ,class1 :class5, na.rm = TRUE) %>%
gather( class, scores ,class1 :class5, na.rm = TRUE)
gather( test, class, scores ,class1 :class5, na.rm = TRUE)
gather( test, class, scores, class1 :class5, na.rm = TRUE)
gather(  scores, class1 :class5, na.rm = TRUE)
gather(  scores, class1 :class5, na.rm = TRUE)
students3 %>%
gather( class, scores ,class1 :class5, na.rm = TRUE)
students3 %>%
gather( class, scores ,class1 :class5, na.rm = TRUE) %>%
spread(test)
students3 %>%
gather( class, scores ,class1 :class5, na.rm = TRUE)
students3 %>%
gather( class, scores ,class1 :class5, na.rm = TRUE) %>%
spread(test, scores)
submit()
students3 %>%
gather( class, scores ,class1 :class5, na.rm = TRUE) %>%
spread(test, scores)
print
submit()
reset()
swift()
submit()
reset()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
source('C:/Users/nzuri/AppData/Local/Temp/Rtmp6jITsu/script2.R')
submit()
submit()
students3 %>%
gather( class, scores ,class1 :class5, na.rm = TRUE) %>%
spread(test, scores)
?
q()
rm(list=ls())
library(swril)
library(swirl)
swirl()
reset()
sutdents3
students
students3
students3 %>% gather(class, result)
students3 %>% gather(class, class1:class5,result)
students3 %>% gather(class, results, class1:class5)
students3 %>% gather(class, results, class1:class5, na.rm=TRUE)
students3 %>% gather(class, results, class1:class5, na.rm=TRUE)
submit()
submit()
submit()
submit()
submit()
？spread
? spread
submit()
submit()
extract_numeric("class5")
submit()
submit()
students4
submit()
students4 %>%
select(id, name, sex) %>%
unique(id)
? unique
students4 %>%
+     select(id, name, sex) %>%
+     unique()
student_info <- students4 %>%
select(id, name, sex) %>%
unqiue()
student_info <- students4 %>%
select(id, name, sex) %>%
unique()
sutdent_info
student_infor
student_info
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status="passed")
passed<-mutate(passed, status="passed")
failed<-mutate(failed, status="failed")
?rbind_list
rbind_list(passed, failed)
sat
data(sat)
View(sat)
sat
reset()
sat
sat <- read.csv("https://github.com/swirldev/swirl_courses/raw/master/Getting_and_Cleaning_Data/Tidying_Data_with_tidyr/sat13.csv")
sat
View(sat)
sat[1,1]
sat[1,1] <- "700–800"
sat <- read.csv("https://github.com/swirldev/swirl_courses/raw/master/Getting_and_Cleaning_Data/Tidying_Data_with_tidyr/sat13.csv", stringsAsFactors=FALSE)
sat
sat[1,1] <- "700–800"
sat
submit()
submit()
sat %>%
select(-contains("total")
)
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range)
sat
sat[1,1]
sat[1,1] <-"700-800"
sat <- read.csv("https://github.com/swirldev/swirl_courses/raw/master/Getting_and_Cleaning_Data/Tidying_Data_with_tidyr/sat13.csv", stringsAsFactors=FALSE)
sat[1,1] <-"700-800"
sat[1,1]
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex)
? separate
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part","sex"))
submit()
submit()
submit()
submit()
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), ":memory:")
# Copy in the buit-in mtcars data frame
dbWriteTable(con, "mtcars", mtcars, row.names = FALSE)
#> [1] TRUE
res <- dbSendQuery(con, "SELECT * FROM mtcars WHERE cyl = 4 AND mpg < 23")
dbFetch(res)
res <- dbSendQuery(con, "SELECT * FROM mtcars where mpg < 23")
dbFetch(res)
res <- dbSendQuery(con, "SELECT * FROM mtcars where mpg < 23")
dbFetch(res,10)
dbFetch(res,10)
dbFetch(res,10)
setwd("C:"\\Users\\nzuri\\Desktop\\UCIHARDataset")
setwd("C:\\Users\\nzuri\\Desktop\\UCIHARDataset")
load("C:/Users/nzuri/Desktop/UCIHARDataset/run_analysis.r")
# Assignment Requirments:
# Assignment Requirments:
# 1.Merges the training and the test sets to create one data set.
# 2.Extracts only the measurements on the mean and standard deviation for each measurement.
# 3.Uses descriptive activity names to name the activities in the data set
# 4.Appropriately labels the data set with descriptive variable names.
# 5. From the data set in step 4, creates a second,
#    independent tidy data set with the average of each variable for each activity and each subject.
library(RSQLite)
library(tidyr)
library(dplyr)
##########################################################################
# Assignment Requirment 1:
# Merges the training and the test sets to create one data set.
##########################################################################
# read the files to lines
test_data <- readLines("test/X_test.txt")
test_data <- readLines("test/X_test.txt")
# trim leading and tailing spaces
test_data <- gsub("^\\s+|\\s+$", "", test_data)
# replace middle spaces with comma
test_data <- gsub("\\s+", ",", test_data)
#read colnames, triming, cleaning
col_name <- readLines("features.txt")
col_name <- gsub("\\(|\\)|-|,","_", col_name) #replace "(", ")", "-" with "_"
col_name <- gsub("_+","_", col_name) # replace duplacate "_" with single "_"
col_name <- gsub("_$","", col_name) # remove any tailing "_"
col_name <- read.table(text=col_name, header=FALSE, sep=" ")
col_name <- t(col_name[2])
test_data <- read.csv(text=test_data, header = FALSE, col.names=col_name)
#get the lables and subject columns
test_lable <- read.table("test/y_test.txt", col.names="activity_id", colClasses = "character")
test_subject <- read.table("test/subject_test.txt", col.names="subject")
#put test data together
test_data <- cbind(test_lable, test_subject, test_data)
################## do the same to train data ################################
train_data <- readLines("train/X_train.txt")
train_data <- gsub("^\\s+|\\s+$", "", train_data)
train_data <- gsub("\\s+", ",", train_data)
train_data <- read.csv(text=train_data, header = FALSE, col.names=col_name)
train_lable <- read.table("train/y_train.txt", col.names="activity_id", colClasses = "character")
train_subject <- read.table("train/subject_train.txt", col.names="subject")
train_data <- cbind(train_lable, train_subject, train_data)
############################################################################
###put it all together
tbl <- rbind(test_data,train_data)
rm(test_data, train_data)
##########################################################################
# Assignment Requirment 2:
# Extracts only the measurements on the
# mean and standard deviation for each measurement.
##########################################################################
col_name <- col_name[grepl("(?i)std|mean", col_name)]
tbl <- tbl[,c("activity_id","subject",col_name)]
# a deplyr tbl %>% select(contrains()) is also possible
##########################################################################
# Assignment Requirment 3&4
# Uses descriptive activity names to name the activities in the data set
# Appropriately labels the data set with descriptive variable names.
##########################################################################
activity_tbl <- read.table("activity_labels.txt",
sep=" ", colClasses = c("character","character"),
col.names=c("id","activity"))
con <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(con, "data_tbl", tbl)
dbWriteTable(con, "activity_tbl", activity_tbl)
tbl <- dbGetQuery(con,
"SELECT * FROM activity_tbl, data_tbl
WHERE data_tbl.activity_id = activity_tbl.id")
dbDisconnect(con)
##########################################################################
# Assignment Requirment 5
# From the data set in step 4, creates a second,
# independent tidy data set with the average of each variable
# for each activity and each subject.
##########################################################################
tbl <- tbl %>%
select( -activity_id, -id) %>%
gather(variablename, result, -activity, -subject) %>%
group_by(variablename, activity, subject) %>%
summarize(average = mean(result))
write.table(tbl, file="datasets.txt", row.name=FALSE)
